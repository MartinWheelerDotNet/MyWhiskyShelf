// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using MyWhiskyShelf.Infrastructure.Persistence.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace MyWhiskyShelf.Migrations.Migrations
{
    [DbContext(typeof(MyWhiskyShelfDbContext))]
    [Migration("20251011150939_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.DistilleryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Vector>("FlavourVector")
                        .IsRequired()
                        .HasColumnType("vector(5)");

                    b.Property<int>("Founded")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TastingNotes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_Distilleries_CountryId");

                    b.HasIndex("FlavourVector")
                        .HasDatabaseName("IX_Distilleries_FlavourVector");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX_Distilleries_Name_eq");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("IX_Distilleries_RegionId");

                    b.ToTable("Distilleries");
                });

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.RegionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.WhiskyBottleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AbvPercentage")
                        .HasPrecision(4, 1)
                        .HasColumnType("numeric(4,1)");

                    b.Property<bool?>("AddedColouring")
                        .HasColumnType("boolean");

                    b.Property<int?>("BatchNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Bottler")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CaskNumber")
                        .HasColumnType("integer");

                    b.Property<bool?>("ChillFiltered")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("DistilleryId")
                        .HasColumnType("uuid");

                    b.Property<string>("DistilleryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Vector>("FlavourVector")
                        .IsRequired()
                        .HasColumnType("vector(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<int>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<int>("VolumeCl")
                        .HasColumnType("integer");

                    b.Property<int>("VolumeRemainingCl")
                        .HasColumnType("integer");

                    b.Property<int?>("YearBottled")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlavourVector")
                        .HasDatabaseName("IX_WhiskyBottles_FlavourVector");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_WhiskyBottles_Name_eq");

                    b.HasIndex("Status");

                    b.ToTable("WhiskyBottles");
                });

            // Relationships
            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.DistilleryEntity", b =>
                {
                    b.HasOne("MyWhiskyShelf.Infrastructure.Persistence.Entities.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyWhiskyShelf.Infrastructure.Persistence.Entities.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                    b.Navigation("Region");
                });

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.RegionEntity", b =>
                {
                    b.HasOne("MyWhiskyShelf.Infrastructure.Persistence.Entities.CountryEntity", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MyWhiskyShelf.Infrastructure.Persistence.Entities.CountryEntity", b =>
                {
                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
